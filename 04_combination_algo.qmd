---
output: html_document
editor_options: 
  chunk_output_type: console
---

## Consolidation des noms 

Charge toutes les données

```{r}
library(tidyverse)
library(sf)
library(arrow)
library(geoarrow)
library(stringdist)

# 1) CHARGER LES DONNÉES -----------------------------------------------

# Lecture de tes .rds en utilisant readr::read_rds (plutôt que readRDS)
angap_2002 <- read_rds("data/angap_2002.rds")
sapm_2010  <- read_rds("data/sapm_2010.rds")
sapm_2017  <- read_rds("data/sapm_2017.rds")
sapm_2024  <- read_rds("data/sapm_2024.rds") 
sapm_evol_2001_2011 <- read_rds("data/sapm_evol_2001_2011.rds")
vahatra <- read_rds("data/vahatra.rds")


# Lecture du Parquet WDPA
# on convertit geometry en sf si on veut le manipuler de façon spatiale
wdpa_mdg_all <- read_parquet("data/MDG_WDPA_Consolidated.parquet")  %>%
  mutate(geometry = st_as_sfc(geometry)) %>%
  st_as_sf() 
```


On agrège tous les jeux de données. Ils n'ont pas tous les mêmes attributs, alors outre le nom et la géométrie, tous les attributs sont imbiqués dans une colonne spécifique.



```{r}
# Function to convert an sf/data.frame row into: 
#  - original_name, dataset, local_id as separate cols
#  - geometry as a separate col
#  - everything else inside 'attributes' as a single-row tibble
create_nested_structure <- function(df, name_col, dataset_id) {
  
  # Retain the original CRS and process the dataset
  df %>%
    # Convert sf -> tibble, keep geometry as is
    as_tibble() %>%
    # Add standard columns
    mutate(
      original_name = .data[[name_col]],
      dataset       = dataset_id,
      local_id      = row_number()
    ) %>%
    # Switch to rowwise so each row is processed individually
    rowwise() %>%
    # Create a list-col "attributes" that is a 1-row tibble 
    # with all columns except geometry/original_name/dataset/local_id
    mutate(
      attributes = list(
        as_tibble(
          pick(-geometry, -original_name, -dataset, -local_id)
        )
      )
    ) %>%
    ungroup() %>%
    # Keep exactly these five columns
    select(original_name, dataset, local_id, attributes, geometry) %>%
    # Reassign CRS explicitly to ensure consistency
    st_as_sf(crs = st_crs(df))
}


# EXAMPLE USAGE ------------------------------------------------------

# 1) Create each "conso" dataset
angap_conso <- create_nested_structure(
  df         = angap_2002,
  name_col   = "NOM",
  dataset_id = "ANGAP_2002"
)

sapm2010_conso <- create_nested_structure(
  df         = sapm_2010,
  name_col   = "NOM",
  dataset_id = "SAPM_2010"
)

sapm2017_conso <- create_nested_structure(
  df         = sapm_2017,
  name_col   = "SHORT_NAME",
  dataset_id = "SAPM_2017"
)

sapm2024_conso <- create_nested_structure(
  df         = sapm_2024,
  name_col   = "SHORT_NAME",
  dataset_id = "SAPM_2024"
)

sapm_evol_conso <- create_nested_structure(
  df         = sapm_evol_2001_2011,
  name_col   = "NOM",
  dataset_id = "SAPM_evol_2001_2011"
)

vahatra_conso <- create_nested_structure(
  df         = vahatra,
  name_col   = "nom",
  dataset_id = "Vahatra_2017"
)

wdpa_conso <- create_nested_structure(
  df         = wdpa_mdg_all,
  name_col   = "NAME",
  dataset_id = "WDPA_2010_2024"
)

# 2) Combine them
all_AP_records <- bind_rows(
  angap_conso,
  sapm2010_conso,
  sapm2017_conso,
  sapm2024_conso,
  sapm_evol_conso,
  vahatra_conso,
  wdpa_conso
)

```


On crée maintenant une table des noms :


```{r}
# On commence par SAPM 2017
pa_names <- sapm_2017 %>%
  st_drop_geometry() %>%
  select(short_name_sapm_2017 = SHORT_NAME, full_name_sapm_2017 = FULL_NAME) %>%
  mutate(short_name_sapm_2017 = str_remove(short_name_sapm_2017, "\\n"),
         full_name_sapm_2017 = str_remove(full_name_sapm_2017, "\\n"))

# Handling duplicates
## There are 2 PAs under the name "Analalava". Need to rename the 2nd
pa_names <- pa_names %>%
  mutate(short_name_sapm_2017 = ifelse(
    full_name_sapm_2017 == "Réserve de Ressources Naturelles d\'Analalava", 
    "RRN Analalava", short_name_sapm_2017))
wdpa_mdg_all <- wdpa_mdg_all %>%
  mutate(NAME = ifelse(WDPAID == 555697889, "RRN Analalava", NAME))

# On rapproche Vahatra
vahatra_names <- vahatra %>%
  st_drop_geometry() %>%
  select(nom_vahatra = nom, full_name_vahatra = full_name,
         nom_wdpa_vahatra = nom_wdpa) %>%
  mutate(full_name_vahatra = str_replace(full_name_vahatra,
                                         "Nouvelle Aire", "Aire"))

pa_names <- pa_names %>%
  left_join(vahatra_names, by = c("full_name_sapm_2017" = "full_name_vahatra"))


# On joint WDPA 2024
wdpa_2024_names <- wdpa_mdg_all %>%
  st_drop_geometry() %>%
  filter(data_year == 2024) %>%
  select(name_wdpa = NAME, orig_name_wdpa = ORIG_NAME, WDPAID)

pa_names <- pa_names %>%
  mutate(name_wdpa = ifelse(is.na(nom_wdpa_vahatra), short_name_sapm_2017,
                            nom_wdpa_vahatra),
         name_wdpa = case_when(
           name_wdpa == "Behara Tranomaro" ~ "Behara-Tranomaro",
           name_wdpa == "Ranobe bay" ~ "Ranobe Bay",
           name_wdpa == "Tampoketsa d'Analamaitso" ~ "Tampoketsa Analamaitso",
           name_wdpa == "Allée des Baobabs" ~ "Allées des Baobabs",
           name_wdpa == "Analabe Betanatanana" ~ "Analabe-Betanatanana",
           name_wdpa == "Ampotaka-Ankorabe" ~ "Ampotaka Ankorabe",
           .default = name_wdpa)
  ) %>%
  select(-nom_wdpa_vahatra)

pa_names <- pa_names %>%
  left_join(wdpa_2024_names, by = c("name_wdpa"), 
             # Duplicate in WDPA with a wrong/incomplete Antrema
            multiple = "first") %>%
  select(-orig_name_wdpa)
```

On va maintenant rapprocher les autres

## SAPM 2010

```{r}
match_protected_areas <- function(x, y,
                                  pa_name_x = "original_name",
                                  pa_name_y = "original_name") {
  # Step 0: Prepare data
  x <- x %>%
    select(all_of(pa_name_x)) %>%
    mutate(index_x = row_number(), 
           centroid_x = st_centroid(geometry))
  
  y <- y %>%
    select(all_of(pa_name_y)) %>%
    mutate(index_y = row_number(), 
           centroid_y = st_centroid(geometry))
  
  # Step 1: Find 3 closest centroids
  x_with_closest <- x %>%
    rowwise() %>%
    mutate(
      closest_y = list(
        y %>%
          st_drop_geometry() %>%
          mutate(dist = as.numeric(st_distance(centroid_x, centroid_y))) %>%
          arrange(dist) %>%
          slice_head(n = 3) %>%
          select(index_y, dist)
      )
    ) %>%
    unnest(closest_y)  # Safely unnest the closest_y column
  
   # Step 2: Calculate percentage overlap
  x_with_overlap <- x_with_closest %>%
    rowwise() %>%
    mutate(
      intersection = list(
        tryCatch(
          st_intersection(geometry, y$geometry[index_y]),
          error = function(e) NULL
        )
      ),
      overlap = if (!is.null(intersection) && length(intersection) > 0) {
        round(
          as.numeric(st_area(intersection[[1]]) / st_area(geometry)),
          3)
      } else {
        0
      }
    ) %>%
    select(-intersection)  # Drop intermediate intersection column
  
  # Consolidate
  x_together <- x_with_overlap %>%
    st_drop_geometry() %>%
    mutate(name_x  = x[[pa_name_x]][index_x],
           name = y[[pa_name_y]][index_y],
           stringdist = stringdist(name_x, name, method = "jw", p = 0)) %>%
    group_by(index_x) %>%
    mutate(rank = row_number()) %>%
    ungroup()

  # Réorganiser les colonnes dans le format souhaité
  output <- x_together %>%
    select(name_x, rank, name, dist, overlap, stringdist) %>%
    pivot_wider(
      names_from = rank,
      values_from = c(name, dist, overlap, stringdist),
      names_prefix = "y"
    ) %>%
    select(
      name_x, 
      name_y1, dist_y1, overlap_y1, stringdist_y1,
      name_y2, dist_y2, overlap_y2, stringdist_y2,
      name_y3, dist_y3, overlap_y3, stringdist_y3
    )
  
  return(output)
}

sapm_2010_names <- match_protected_areas(sapm2010_conso, sapm2017_conso) %>%
  mutate(name_pivot = case_when(
    overlap_y2 > 0.35 & overlap_y2 > overlap_y1 ~ name_y2,
    overlap_y1 < 0.10 ~ NA,
    .default = name_y1),
    .after = name_x) %>%
  select(name_sapm_2010 = name_x, name_pivot)


sapm_2010_na_pivot <- sum(is.na(sapm_2010_names$name_pivot))
# [1] 27

pa_names <- pa_names %>%
  full_join(sapm_2010_names, by = c("short_name_sapm_2017" = "name_pivot"))

verif_pivot <- sum(
  !is.na(pa_names$name_sapm_2010) & is.na(pa_names$short_name_sapm_2017)
  )
# [1] 27 # Merge OK
```



## SAPM évolution


```{r}
sapm_evol_names <- match_protected_areas(sapm_evol_conso, sapm2017_conso) %>%
  mutate(name_pivot = case_when(
    overlap_y2 > 0.35 & overlap_y2 > overlap_y1 ~ name_y2,
    overlap_y1 < 0.10 ~ NA,
    .default = name_y1),
    .after = name_x) %>%
  select(name_sapm_evol = name_x, name_pivot)

pa_names <- pa_names %>%
  full_join(sapm_evol_names, by = c("short_name_sapm_2017" = "name_pivot"))

library(tmap)
tmap_mode("view")
tm_shape(filter(sapm_evol_conso, original_name == "Analalava I - II")) + 
  tm_polygons(col = "red", alpha = 0.2) +
  tm_shape(sapm_2017) +
  tm_polygons(col = "green", alpha = 0.2) +
  tmap_options(check.and.fix = TRUE)
```


## ANGAP 2002

```{r}
angap_names <- match_protected_areas(angap_conso, sapm2017_conso) %>%
  mutate(across(everything(), ~ sapply(., first))) %>%
  mutate(name_pivot = case_when(
    overlap_y2 > 0.35 & overlap_y2 > overlap_y1 ~ name_y2,
    overlap_y1 < 0.10 ~ NA,
    .default = name_y1),
    .after = name_x) %>%
  select(name_angap_2002 = name_x, name_pivot)

pa_names <- pa_names %>%
  full_join(angap_names, by = c("short_name_sapm_2017" = "name_pivot"))
```










